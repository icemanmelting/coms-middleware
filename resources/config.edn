{:api-server #profile {:default {:port 8080}
                       :staging {}
                       :production {}}
 :steps #profile {:default {:tx-manager {:type :mem
                                         :conf {:file "path-to-transactions-file"}}
                            :global-state-manager {:type :mem
                                                   :conf {}}
                            :processing-type :local
                            :queues [{:name "mcu-out-grinder"
                                        :buffer-size 10}
                                       {:name "basecommand-grinder"
                                        :buffer-size 10}
                                       {:name "basecommand-demuxer"
                                        :buffer-size 10}
                                       {:name "dashboard-sink"
                                        :buffer-size 10}
                                       {:name "jdbc-sink"
                                        :buffer-size 10}]
                            :sources [{:name "mcu-receiver"
                                       :tx {:fail-fast? true
                                            :clean-up-fn (fn [_ _])}
                                       :conf {:port 4444
                                              :channels {:out [{:output-channel "mcu-out-grinder"}]}}
                                       :type coms-middleware.core/MCUSource
                                       :threads 1}]
                            :grinders [{:name "basecommand-grinder"
                                        :tx {:fail-fast? false
                                             :clean-up-fn (fn [_ _])
                                             :retries 2}
                                        :db-cfg {:dbtype "postgres"
                                                 :dbname "test"
                                                 :host "127.0.0.1"
                                                 :port 5432
                                                 :user "postgres"
                                                 :password "postgres"}
                                        :conf {:type :ice
                                               :channels {:in "basecommand-grinder"
                                                          :out {:output-channel "basecommand-demuxer"}}}
                                        :type coms-middleware.core/MCUOutGrinder
                                        :poll-frequency-ms 1
                                        :threads 1}]
                            :demuxers [{:name "basecommand-splitter"
                                        :tx {:fail-fast? false
                                             :clean-up-fn (fn [_ _ _])
                                             :retries 1}
                                        :conf {:channels {:in "basecommand-splitter"
                                                          :out {:trip-grinder "jdbc-sink"
                                                                :datomic-sink "dashboard-sink"}}}
                                        :poll-frequency-ms 1}]
                            :error-sink {:name "logger-error"
                                         :conf {}
                                         :x-fn (fn [_ e] (clojure.tools.logging/error "Error found" e))
                                         :poll-frequency-ms 500
                                         :threads 1}
                            :sinks [{:name "dashboard-sink"
                                     :tx {:fail-fast? false
                                          :clean-up-fn (fn [_ _ _])}
                                     :conf {:channels {:in "dashboard-sink"}
                                            :destination-host "the cars host"
                                            :destination-port "the cars port"}
                                     :poll-frequency-ms 1
                                     :type coms-middleware.core/DashboardSink
                                     :threads 1}
                                    {:name "jdbc-sink"
                                     :tx {:fail-fast? true
                                          :clean-up-fn (fn [_ _ _])}
                                     :conf {:channels {:in "jdbc-sink"}
                                            :car-id "the-car-id"
                                            :db-name "twitter"
                                            :db-cfg {:dbtype "postgres"
                                                     :dbname "test"
                                                     :host "127.0.0.1"
                                                     :port 5432
                                                     :user "postgres"
                                                     :password "postgres"}}
                                     :x-fn twitter-hashtag-counter.core/insert-objects-sql
                                     :type clojure-data-grinder-core.protocols.impl/map->JDBCSink
                                     :poll-frequency-ms 1
                                     :threads 4}]}
                  :staging {}
                  :production {}}}