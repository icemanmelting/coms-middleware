version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/comms-middleware # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/clojure:openjdk-8-lein-2.9.3-buster # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          LEIN_ROOT: nbd
          JVM_OPTS: -Xmx3200m # limit the maximum heap size to prevent out of memory errors

    steps: # commands that comprise the `build` job
      - checkout # check out source code to working directory

      - restore_cache: # restores saved cache if checksum hasn't changed since the last run
          key: comms-middleware-{{ checksum "project.clj" }}

      - run: git clone https://github.com/sn0wF1eld/clojure-data-grinder-core.git

      - run: cd clojure-data-grinder-core && lein deps && lein clean && lein install

      - run: cd ~/comms-middleware

      - run: git https://github.com/icemanmelting/comms-common.git

      - run: cd comms-common && mvn clean && mvn install

      - run: cd ~/comms-middleware

#      - run: lein deps

      - save_cache: # generate and store cache in the .m2 directory using a key template
          paths:
            - ~/.m2
            - ~/.lein
          key: comms-middleware{{ checksum "project.clj" }}

      - run: lein do test, uberjar

      - store_artifacts: # upload test results for display in Test Summary
          path: target/uberjar/comms-middleware.jar
          destination: uberjar
